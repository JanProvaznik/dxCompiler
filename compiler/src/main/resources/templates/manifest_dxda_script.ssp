<%@ val runtimePathConfig: dx.core.io.DxWorkerPaths %>
<%@ val bashDollar: String = "$" %>
manifest_download_dxda() {
    # run the dx-download-agent (dxda) on a manifest of manifest files
    if [[ -f "${runtimePathConfig.getDxdaManifestDownloadManifestFile().toString}" ]]; then
       echo "Using dxda version: ${bashDollar}(dx-download-agent version)"
       head -n 20 "${runtimePathConfig.getDxdaManifestDownloadManifestFile().toString}"
       echo ""
       bzip2 "${runtimePathConfig.getDxdaManifestDownloadManifestFile().toString}"

       # Run the download agent, and store the return code; do not exit on error.
       # We need to run it from the root directory, because it uses relative paths.
       cd /
       dxda_error_code=0
       dx-download-agent download "${runtimePathConfig.getDxdaManifestDownloadManifestFile().toString}.bz2" || dxda_error_code=${bashDollar}? && true

       # if there was an error during download, print out the download log
       if [[ ${bashDollar}dxda_error_code != 0 ]]; then
           echo "download agent failed rc=${bashDollar}dxda_error_code"
           if [[ -f "${runtimePathConfig.getDxdaManifestDownloadManifestFile().toString}.bz2.download.log" ]]; then
              echo "The download log is:"
              cat "${runtimePathConfig.getDxdaManifestDownloadManifestFile().toString}.bz2.download.log"
           fi
           exit ${bashDollar}dxda_error_code
       fi

       # The download was ok, check file integrity on disk
       dx-download-agent inspect "${runtimePathConfig.getDxdaManifestDownloadManifestFile().toString}.bz2"
    fi
}

workflow_manifest_download_dxda() {
    # run the dx-download-agent (dxda) on a manifest of workflow manifest files
    if [[ -f "${runtimePathConfig.getDxdaWorkflowManifestDownloadManifestFile().toString}" ]]; then
       echo "Using dxda version: ${bashDollar}(dx-download-agent version)"
       head -n 20 "${runtimePathConfig.getDxdaWorkflowManifestDownloadManifestFile().toString}"
       echo ""
       bzip2 "${runtimePathConfig.getDxdaWorkflowManifestDownloadManifestFile().toString}"

       # Run the download agent, and store the return code; do not exit on error.
       # We need to run it from the root directory, because it uses relative paths.
       cd /
       dxda_error_code=0
       dx-download-agent download "${runtimePathConfig.getDxdaWorkflowManifestDownloadManifestFile().toString}.bz2" || dxda_error_code=${bashDollar}? && true

       # if there was an error during download, print out the download log
       if [[ ${bashDollar}dxda_error_code != 0 ]]; then
           echo "download agent failed rc=${bashDollar}dxda_error_code"
           if [[ -f "${runtimePathConfig.getDxdaWorkflowManifestDownloadManifestFile().toString}.bz2.download.log" ]]; then
              echo "The download log is:"
              cat "${runtimePathConfig.getDxdaWorkflowManifestDownloadManifestFile().toString}.bz2.download.log"
           fi
           exit ${bashDollar}dxda_error_code
       fi

       # The download was ok, check file integrity on disk
       dx-download-agent inspect "${runtimePathConfig.getDxdaWorkflowManifestDownloadManifestFile().toString}.bz2"
    fi
}